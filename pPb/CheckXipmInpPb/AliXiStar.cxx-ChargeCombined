
/**************************************************************************
 * Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
 *                                                                        *
 * Author: The ALICE Off-line Project.                                    *
 * Contributors are mentioned in the code where appropriate.              *
 *                                                                        *
 * Permission to use, copy, modify and distribute this software and its   *
 * documentation strictly for non-commercial purposes is hereby granted   *
 * without fee, provided that the above copyright notice appears in all   *
 * copies and that both the copyright notice and this permission notice   *
 * appear in the supporting documentation. The authors make no claims     *
 * about the suitability of this software for any purpose. It is          *
 * provided "as is" without express or implied warranty.                  *
 **************************************************************************/

////////////////////////////////////////////////////////////////////////////////
//
//  This class is used to reconstruct the neutral Xi(1530) resonance.
//  This class essentially combines charged Xi candidates from the Xi Vertexer
//  with primary charged pions.
//
//  authors: Dhevan Gangadharan (dhevan.raja.gangadharan@cern.ch)
//
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <math.h>
#include "TChain.h"
#include "TFile.h"
#include "TKey.h"
#include "TObject.h"
#include "TObjString.h"
#include "TList.h"
#include "TTree.h"
#include "TH1F.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TH3D.h"
#include "TProfile.h"
#include "TCanvas.h"

#include "AliAnalysisTask.h"
#include "AliAnalysisManager.h"


#include "AliESDEvent.h"
#include "AliESDInputHandler.h"
#include "AliESDtrackCuts.h"
#include "AliMCEventHandler.h"
#include "AliMCEvent.h"
#include "AliStack.h"
#include "AliCentrality.h"
#include "AliOADBCentrality.h"
#include "AliOADBPhysicsSelection.h"
#include "AliESDVZERO.h"
#include "AliESDTZERO.h"
#include "AliTriggerAnalysis.h"

#include "AliAODEvent.h"
#include "AliAODInputHandler.h"
#include "AliAODMCParticle.h"
#include "AliAODcascade.h"
#include "AliESDcascade.h"
#include "AliV0vertexer.h"
#include "AliCascadeVertexer.h"

#include "AliXiStar.h"

#define PI 3.1415927


// Author: Dhevan Gangadharan

ClassImp(AliXiStar)

//________________________________________________________________________
AliXiStar::AliXiStar():
AliAnalysisTaskSE(),
fname(0),
fESD(0x0),
fOutputList(0x0),
fTrackCut(0x0),
fPIDResponse(0x0),

fCentrality(0),
//fTreeXi(0),
//fTreePi(0),
//fTreeEvent(0),
//fTreeMC(0),
fEC(0x0),
fEvt(0x0),

fTempStruct(0x0),
fZvertexBins(0),
fEventsToMix(0),
fMultBins(0),
fMCcase(0),
fEventCounter(0),
fEventNumber(0),
fCentralityEstimator("V0A"),

fMaxDecayLength(0),
fMassWindow(0),
fTrueMassPr(0),
fTrueMassPi(0),
fTrueMassK(0),
fTrueMassLam(0),
fTrueMassXi(0),

fESDTrack4(0x0),
fXiTrack(0x0),
fCutList(0)




{
    // Default Constructor
    for (Int_t i=0; i<21; i++){
        fCovMatrix[i]=-99999.;
        if (i<12) fMultLimits[i] = 0;
    }
    for (Int_t i=0; i<kNCuts; i++){
        fDecayParameters[i]=0;
        for (Int_t j=0; j<kNCutVariations; j++){
            fCutValues[j][i]=0;
        }
    }
    //
    for (Int_t cv=0; cv<kNCutVariations; cv++){
        CutVar[cv].fXi=0x0;
      //
        CutVar[cv].fXiStar=0x0;
        CutVar[cv].fXiStarLSBG=0x0;
        //
        CutVar[cv].fXiStarEMBG=0x0;
        CutVar[cv].fXiStarEMLSBG=0x0;
              //
        CutVar[cv].fMCrecXi=0x0;
        CutVar[cv].fXiStarMC=0x0;
    }
    
}
//________________________________________________________________________
AliXiStar::AliXiStar(const char *name,  Bool_t MCdecision, Int_t CutListOption)
: AliAnalysisTaskSE(name),
fname(name),
fESD(0x0),
fOutputList(0x0),
fTrackCut(0x0),
fPIDResponse(0x0),
fCentrality(0),
//fTreeXi(0),
//fTreePi(0),
//fTreeEvent(0),
//fTreeMC(0),
fEC(0x0),
fEvt(0x0),
fTempStruct(0x0),
fZvertexBins(0),
fEventsToMix(0),
fMultBins(0),
fMCcase(MCdecision),
fEventCounter(0),
fEventNumber(0),
fCentralityEstimator("V0A"),
fMaxDecayLength(0),
fMassWindow(0),
fTrueMassPr(0),
fTrueMassPi(0),
fTrueMassK(0),
fTrueMassLam(0),
fTrueMassXi(0),

fESDTrack4(0x0),
fXiTrack(0x0),
fCutList(CutListOption)



{
    // Main Constructor
    for (Int_t i=0; i<21; i++){
        fCovMatrix[i]=-99999.;
        if (i<12) fMultLimits[i] = 0;
    }
    for (Int_t i=0; i<kNCuts; i++){
        fDecayParameters[i]=0;
        for (Int_t j=0; j<kNCutVariations; j++){
            fCutValues[j][i]=0;
        }
    }
    //
    for (Int_t cv=0; cv<kNCutVariations; cv++){
        CutVar[cv].fXi=0x0;
        CutVar[cv].fXiStar=0x0;
        CutVar[cv].fXiStarLSBG=0x0;
        //
        CutVar[cv].fXiStarEMBG=0x0;
        CutVar[cv].fXiStarEMLSBG=0x0;
         //
        CutVar[cv].fMCrecXi=0x0;
        CutVar[cv].fXiStarMC=0x0;
    }
    
    // Define output for Tree
    DefineInput (0, TChain::Class()); //jisong added
    
    // Define output slots here
    // Output slot #1
 //   DefineOutput(0, TTree::Class());
    DefineOutput(1, TList::Class());
    
}
//________________________________________________________________________
AliXiStar::AliXiStar(const AliXiStar &obj)
: AliAnalysisTaskSE(obj.fname),
fname(obj.fname),
fESD(obj.fESD),
fOutputList(obj.fOutputList),
fTrackCut(obj.fTrackCut),
fPIDResponse(obj.fPIDResponse),
fCentrality(obj.fCentrality),
//fTreeXi(obj.fTreeXi),
//fTreePi(obj.fTreePi),
//fTreeEvent(obj.fTreeEvent),
//fTreeMC(obj.fTreeMC),
fEC(obj.fEC),
fEvt(obj.fEvt),
fTempStruct(obj.fTempStruct),
fZvertexBins(obj.fZvertexBins),
fEventsToMix(obj.fEventsToMix),
fMultBins(obj.fMultBins),
fMultLimits(),
fMCcase(obj.fMCcase),
fEventCounter(obj.fEventCounter),
fEventNumber(obj.fEventNumber),
fCentralityEstimator(obj.fCentralityEstimator),
fMaxDecayLength(obj.fMaxDecayLength),
fMassWindow(obj.fMassWindow),
fTrueMassPr(obj.fTrueMassPr),
fTrueMassPi(obj.fTrueMassPi),
fTrueMassK(obj.fTrueMassK),
fTrueMassLam(obj.fTrueMassLam),
fTrueMassXi(obj.fTrueMassXi),

fESDTrack4(obj.fESDTrack4),
fXiTrack(obj.fXiTrack),
fCutList(obj.fCutList)

{
    // Copy constructor
    for (Int_t i=0; i<21; i++){
        fCovMatrix[i]=obj.fCovMatrix[i];
        if (i<12) fMultLimits[i]=obj.fMultLimits[i];
    }
    for (Int_t i=0; i<kNCuts; i++){
        fDecayParameters[i]=obj.fDecayParameters[i];
        for (Int_t j=0; j<kNCutVariations; j++){
            fCutValues[j][i]=obj.fCutValues[j][i];
        }
    }
    
}
//________________________________________________________________________
AliXiStar &AliXiStar::operator=(const AliXiStar &obj)
{
    // Assignment operator
    if (this == &obj)
        return *this;
    
    fname = obj.fname;
    fESD = obj.fESD;
    fOutputList = obj.fOutputList;
    fTrackCut = obj.fTrackCut;
    fPIDResponse = obj.fPIDResponse;
    fCentrality = obj.fCentrality;
 //   fTreeXi = obj.fTreeXi;
 //   fTreePi = obj.fTreePi;
 //   fTreeEvent =  obj.fTreeEvent;
 //   fTreeMC = obj.fTreeMC;
    fEC = obj.fEC;
    fEvt = obj.fEvt;
    fTempStruct = obj.fTempStruct;
    fZvertexBins = obj.fZvertexBins;
    fEventsToMix = obj.fEventsToMix;
    fMultBins = obj.fMultBins;
    for (Int_t i=0; i<12; i++){
        fMultLimits[i]=obj.fMultLimits[i];
    }
    fMCcase = obj.fMCcase;
    fEventCounter = obj.fEventCounter;
    fEventNumber = obj.fEventNumber;
    fMaxDecayLength = obj.fMaxDecayLength;
    fMassWindow = obj.fMassWindow;
    for (Int_t i=0; i<21; i++){
        fCovMatrix[i]=obj.fCovMatrix[i];
    }
    
    fTrueMassPr = obj.fTrueMassPr;
    fTrueMassPi = obj.fTrueMassPi;
    fTrueMassK = obj.fTrueMassK;
    fTrueMassLam = obj.fTrueMassLam;
    fTrueMassXi = obj.fTrueMassXi;
    fESDTrack4 = obj.fESDTrack4;
    fXiTrack = obj.fXiTrack;
    fCutList = obj.fCutList;
    fCentralityEstimator = obj.fCentralityEstimator;
    
    
    for (Int_t i=0; i<kNCuts; i++){
        fDecayParameters[i]=obj.fDecayParameters[i];
        for (Int_t j=0; j<kNCutVariations; j++){
            fCutValues[j][i]=obj.fCutValues[j][i];
        }
    }
    
    
    return (*this);
}
//________________________________________________________________________
AliXiStar::~AliXiStar()
{
    // Destructor

    if(fESD) delete fESD;
    if(fOutputList) delete fOutputList;
    if(fTrackCut) delete fTrackCut;
    if(fPIDResponse) delete fPIDResponse;
    if(fCentrality) delete fCentrality;
//    if(fTreePi) delete fTreePi;
//    if(fTreeEvent) delete fTreeEvent;
//    if(fTreeMC) delete fTreeMC;
    if(fEC) delete fEC;
    if(fEvt) delete fEvt;
    if(fTempStruct) delete fTempStruct;
    if(fESDTrack4) delete fESDTrack4;
    if(fXiTrack) delete fXiTrack;
//    if(fTreeXi){delete fTreeXi;
//        fTreeXi = 0x0;
//    }
    
    for (Int_t cv=0; cv<kNCutVariations; cv++){
        if(CutVar[cv].fXi) delete CutVar[cv].fXi;
        if(CutVar[cv].fXiStar) delete CutVar[cv].fXiStar;
        if(CutVar[cv].fXiStarLSBG) delete CutVar[cv].fXiStarLSBG;
        //
        if(CutVar[cv].fXiStarEMBG) delete CutVar[cv].fXiStarEMBG;
        if(CutVar[cv].fXiStarEMLSBG) delete CutVar[cv].fXiStarEMLSBG;
        //
        if(CutVar[cv].fMCrecXi) delete CutVar[cv].fMCrecXi;
        if(CutVar[cv].fXiStarMC) delete CutVar[cv].fXiStarMC;
    }
    
}
//________________________________________________________________________
void AliXiStar::XiStarInit()
{
    //
    //Inits cuts and analysis settings
    //
    
    fEventCounter=0;// event counter initialization
    cout<<"AliXiStar XiStarInit() call"<<endl;
    
    
    ///////////////////////////////////////////////
    // Track Cuts for ESD analysis
    fTrackCut = new AliESDtrackCuts();
    fTrackCut->SetPtRange(.15,1000);
    fTrackCut->SetAcceptKinkDaughters(kFALSE);
    //fTrackCut->SetMinNClustersTPC(70);
    fTrackCut->SetRequireTPCRefit(kTRUE);
    fTrackCut->SetMaxChi2PerClusterTPC(4); //From Enrico

    ////////////////////////////////////////////////
    
    fZvertexBins = 20;
    fMultBins = 11;// This must also be set in AliXiStar.h
    if(fMCcase) fEventsToMix = 0;
    else fEventsToMix = 20; // original 40 jisong
    
    // multiplicity edges for event mixing bins
    fMultLimits[0]=0, fMultLimits[1]=150, fMultLimits[2]=300, fMultLimits[3]=450, fMultLimits[4]=600, fMultLimits[5]=750;
    fMultLimits[6]=900, fMultLimits[7]=1050, fMultLimits[8]=1200, fMultLimits[9]=1300, fMultLimits[10]=1400, fMultLimits[11]=1500;
    
    
    /*    fMultLimits[0]=0, fMultLimits[1]=5, fMultLimits[2]=10, fMultLimits[3]=15, fMultLimits[4]=20, fMultLimits[5]=25;
     fMultLimits[6]=30, fMultLimits[7]=35, fMultLimits[8]=40, fMultLimits[9]=45, fMultLimits[10]=50, fMultLimits[11]=150;
     */
    
    fEC = new AliXiStarEventCollection **[fZvertexBins];
    for(unsigned short i=0; i<fZvertexBins; i++){
        
        fEC[i] = new AliXiStarEventCollection *[fMultBins];
        
        for(unsigned short j=0; j<fMultBins; j++){
            
            fEC[i][j] = new AliXiStarEventCollection(fEventsToMix+1);
        }
    }
    
    fTempStruct = new AliXiStarTrackStruct[kNbinsM*8];
    
    
    
    fESDTrack4 = new AliESDtrack();
    fXiTrack = new AliESDtrack();
    
    
    fMaxDecayLength = 100.;
    fMassWindow = 0.007;
    
    /////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////
    // DecayParameters Key (number represents array index)
    // NclustersTPC: 0=proton, 1=pion first, 2=pion second, 3=pion third
    // DCAVtx: 4=proton, 5=pion first, 6=pion second, 7=lambda, 8=pion third
    // 9 = DCA proton-pion
    // 10 = DCA Lambda-pion
    // 11 = Rxy Lambda
    // 12 = Rxy Xi
    // 13 = Cos PA Lambda
    // 14 = Cos PA Xi
    
    // Set Standard Reconstruction cut values
    fCutValues[0][0] = 70; fCutValues[0][1] = 70; fCutValues[0][2] = 70; fCutValues[0][3] = 70;
    fCutValues[0][4] = 0.03;
    fCutValues[0][5] = 0.03;
    fCutValues[0][6] = 0.01;
    fCutValues[0][7] = 0.01;
    fCutValues[0][8] = 2.0;
    fCutValues[0][9] = 1.5;
    fCutValues[0][10] = 2.0;
    fCutValues[0][11] = 1.4;
    fCutValues[0][12] = 0.1;
    fCutValues[0][13] = 0.9;
    fCutValues[0][14] = 0.98;
    
    
    for(int cv=1; cv<kNCutVariations; cv++){
        for(int ct=0; ct<kNCuts; ct++){
            fCutValues[cv][ct] = fCutValues[0][ct];
        }
    }
    
    //systematic variation// Loose
    fCutValues[1][0] = 60; fCutValues[1][1] = 60; fCutValues[1][2] = 60; fCutValues[1][3] = 60;// 80
    fCutValues[2][4] = 0.02;// 0.104
    fCutValues[3][5] = 0.02;// 0.104
    fCutValues[4][6] = 0.005;// 0.08
    fCutValues[5][7] = 0.005;// 0.1
    fCutValues[6][8] = 1.9;// 1.0
    fCutValues[7][9] = 1.6;// 0.94
    fCutValues[8][10] = 2.1;// 1.41
    fCutValues[9][11] = 1.5;// 4.39
    fCutValues[10][12] = 0.05;// 0.95
    fCutValues[11][13] = 0.85;// 0.99
    fCutValues[12][14] = 0.975;// 0.085

    
    
    
    
    
    // PDG mass values
    fTrueMassPr=.93827, fTrueMassPi=.13957, fTrueMassK=.493677, fTrueMassLam=1.11568, fTrueMassXi=1.32171;
    
    // The following CovMatrix is set so that PropogateToDCA() ignores track errors. Only used to propagate Xi to third pion for XiStar reconstruction
    for(Int_t i=0; i<21; i++) fCovMatrix[i]=0;
    fCovMatrix[0]=1, fCovMatrix[2]=1, fCovMatrix[5]=1, fCovMatrix[9]=1, fCovMatrix[14]=1, fCovMatrix[20]=1;
    
    
}
//________________________________________________________________________
void AliXiStar::UserCreateOutputObjects()
{
    XiStarInit();
    // XiStarInit();// Initialize settings original
    
    // Create histograms
    fOutputList = new TList();
    fOutputList->SetOwner();
    
    TH3F *fVertexDist1 = new TH3F("fVertexDist1","Vertex Distribution",20,-1,1, 20,-1,1, 600,-30,30);
    fVertexDist1->GetXaxis()->SetTitle("X Vertex (cm)");
    fVertexDist1->GetYaxis()->SetTitle("Y Vertex (cm)");
    fVertexDist1->GetZaxis()->SetTitle("Z Vertex (cm)");
    fOutputList->Add(fVertexDist1);
    
    TH3F *fVertexDist3 = new TH3F("fVertexDist3","Vertex Distribution",20,-1,1, 20,-1,1, 600,-30,30);
    fVertexDist3->GetXaxis()->SetTitle("X Vertex (cm)");
    fVertexDist3->GetYaxis()->SetTitle("Y Vertex (cm)");
    fVertexDist3->GetZaxis()->SetTitle("Z Vertex (cm)");
    fOutputList->Add(fVertexDist3);
    
    TH2F *fDCADist = new TH2F("fDCADist","DCA distribution",kNbinsM,-.5,kNbinsM*8-.5, 100,0,10);
    fOutputList->Add(fDCADist);
    
    
    TH3F *fMultDist3d = new TH3F("fMultDist3d","Multiplicity Distribution",kNbinsM,-.5,kNbinsM-.5, kNbinsM,-.5,kNbinsM-.5, kNbinsM,-.5,kNbinsM-.5);
    fMultDist3d->GetXaxis()->SetTitle("Multiplicity");
    fMultDist3d->GetYaxis()->SetTitle("Positive Multiplicity");
    fMultDist3d->GetZaxis()->SetTitle("Negative Multiplicity");
    fMultDist3d->SetMarkerStyle(kFullCircle);
    fOutputList->Add(fMultDist3d);
    
    
    TH1F *fMultDist1 = new TH1F("fMultDist1","Multiplicity Distribution",kNbinsM,0,kNbinsM*8);
    fMultDist1->GetXaxis()->SetTitle("Multiplicity");
    fOutputList->Add(fMultDist1);
    
    TH1F *fMultDist2 = new TH1F("fMultDist2","Multiplicity Distribution After Vz selection",kNbinsM,-.5,kNbinsM*8-.5);
    fMultDist2->GetXaxis()->SetTitle("Multiplicity");
    fOutputList->Add(fMultDist2);
    
    TH1F *fMultDist3 = new TH1F("fMultDist3","Multiplicity Distribution After reject pile up from SPD",kNbinsM,-.5,kNbinsM*8-.5);
    fMultDist3->GetXaxis()->SetTitle("Multiplicity");
    fOutputList->Add(fMultDist3);
    
    TH1F *fMultDist4 = new TH1F("fMultDist4","Multiplicity Distribution : Primary NContributor > 1 ",kNbinsM,-.5,kNbinsM*8-.5);
    fMultDist4->GetXaxis()->SetTitle("Multiplicity");
    fOutputList->Add(fMultDist4);
    
    TH1F *fMultDist5 = new TH1F("fMultDist5","Multiplicity Distribution of Xitrack",kNbinsM,-.5,kNbinsM*8-.5);
    fMultDist5->GetXaxis()->SetTitle("Multiplicity");
    fOutputList->Add(fMultDist5);
    
    TH1F *hCentrality = new TH1F("hCentrality","Centrality",100,0,100);
    hCentrality->GetXaxis()->SetTitle("Centrality");
    fOutputList->Add(hCentrality);
    
    TH1F *hCentralitykSelected = new TH1F("hCentralitykSelected","Centrality : after MB event selection",100,0,100);
    hCentralitykSelected->GetXaxis()->SetTitle("hCentralitykSelected");
    fOutputList->Add(hCentralitykSelected);
    

    TH1F *hEventSelecInfo = new TH1F("hEventSelecInfo","hEventSelecInfo",10,0,10);
    fOutputList->Add(hEventSelecInfo);
    hEventSelecInfo->GetXaxis()->SetBinLabel(2,"kMB");
    hEventSelecInfo->GetXaxis()->SetBinLabel(3,"kINT7");
    hEventSelecInfo->GetXaxis()->SetBinLabel(8,"kAny");
    hEventSelecInfo->GetXaxis()->SetBinLabel(9,"kAndMB");

    
   // TH3F *fPtEtaDist = new TH3F("fPtEtaDist","PtEtaDist",2,-1.1,1.1, 300,0,3., 28,-1.4,1.4);
   // fOutputList->Add(fPtEtaDist);
    
   // TH3F *fPhiPtDist = new TH3F("fPhiPtDist","PhiPtDist",2,-1.1,1.1, 120,0,2*PI, 300,0,3.);
   // fOutputList->Add(fPhiPtDist);
    
    
    TH1F *fPtDist = new TH1F("fPtDist","fPtDist",90,0,9);
    fPtDist->GetXaxis()->SetTitle("fPtDist");
    fOutputList->Add(fPtDist);
    
    
    TH1F *fPhiDist = new TH1F("fPhiDist","fPhiDist",70,0,7);
    fPhiDist->GetXaxis()->SetTitle("fPhiDist");
    fOutputList->Add(fPhiDist);
    
    
    TH1F *fEtaDist = new TH1F("fEtaDist","fEtaDist",60,-3,3);
    fEtaDist->GetXaxis()->SetTitle("fEtaDist");
    fOutputList->Add(fEtaDist);
    
    
    
    TH1F *fCutEvents = new TH1F("fCutEvents","fCutEvents",16,0,16);
    fOutputList->Add(fCutEvents);
    
    TH1F *fTPCNcls_p = new TH1F("fTPCNcls_p","TPC Number of cluster proton",200,0,200);
    fOutputList->Add(fTPCNcls_p);
    
    
    TH1F *fTPCNcls_pi1 = new TH1F("fTPCNcls_pi1","TPC Number of cluster 1st pion",200,0,200);
    fOutputList->Add(fTPCNcls_pi1);
    
    TH1F *fTPCNcls_pi2 = new TH1F("fTPCNcls_pi2","TPC Number of cluster 2nd pion",200,0,200);
    fOutputList->Add(fTPCNcls_pi2);
    
    TH1F *fTPCNcls_pi3 = new TH1F("fTPCNcls_pi3","TPC Number of cluster 3rd pion",200,0,200);
    fOutputList->Add(fTPCNcls_pi3);
    
    
    TH1F *fDCADist_p = new TH1F("fDCADist_p","DCA distribution proton",200,0,2);
    fOutputList->Add(fDCADist_p);
    
    TH1F *fDCADist_pi1 = new TH1F("fDCADist_pi1","DCA distribution 1st pion",200,0,2);
    fOutputList->Add(fDCADist_pi1);
    
    TH1F *fDCADist_pi2 = new TH1F("fDCADist_pi2","DCA distribution 2nd pion",200,0,2);
    fOutputList->Add(fDCADist_pi2);
    
    
    
    TH1F *fDCADist_lambda = new TH1F("fDCADist_lambda","DCA distribution Lambda",200,0,2);
    fOutputList->Add(fDCADist_lambda);
    
    TH1F *fDCADist_3rd_pi = new TH1F("fDCADist_3rd_pi","DCA distribution 3rd pion",400,0,4);
    fOutputList->Add(fDCADist_3rd_pi);
    
    TH1F *fDCADist_pi_p = new TH1F("fDCADist_pi_p","DCA distribution Pion-Proton",400,0,4);
    fOutputList->Add(fDCADist_pi_p);
    
    TH1F *fDCADist_pi_lambda = new TH1F("fDCADist_pi_lambda","DCA distribution Pion-Lambda",400,0,4);
    fOutputList->Add(fDCADist_pi_lambda);
    
    
    TH1F *fRXY_lambda = new TH1F("fRXY_lambda","Rxy distribution Lambda",400,0,4);
    fOutputList->Add(fRXY_lambda);
    
    TH1F *fRXY_Xi = new TH1F("fRXY_Xi","Rxy distribution Xi",400,0,4);
    fOutputList->Add(fRXY_Xi);
    
    TH1F *fCosPA_lambda = new TH1F("fCosPA_lambda","Cosine pointing angle Lambda",100,0.996,1.002);
    fOutputList->Add(fCosPA_lambda);
    
    TH1F *fCosPA_Xi = new TH1F("fCosPA_Xi","Cosine pointing angle Xi",100,0.9989,1.0001);
    fOutputList->Add(fCosPA_Xi);
    
    TH1F *hXiInvMass = new TH1F("hXiInvMass","Xi invariant mass distribution : cent 0 - 10",200,1.2,1.4);
    fOutputList->Add(hXiInvMass);
    
   
    
    
    TH2F *TPCPID = new TH2F("TPCPID","PID via TPC",1000,0,20,1000,0,200);
    fOutputList->Add(TPCPID);
    
    TH2F *hTPCPIDpi = new TH2F("hTPCPIDpi","PID pion",1000,0,20,1000,0,200);
    fOutputList->Add(hTPCPIDpi);
    TH2F *hTPCPIDk = new TH2F("hTPCPIDk","PID kaon",1000,0,20,1000,0,200);
    fOutputList->Add(hTPCPIDk);
    TH2F *hTPCPIDp = new TH2F("hTPCPIDp","PID proton",1000,0,20,1000,0,200);
    fOutputList->Add(hTPCPIDp);
    
    
    
    
    TH2F *hdEdxProton = new TH2F("hdEdxProton","Xi PID p",1000,0,20,1000,0,200);
    fOutputList->Add(hdEdxProton);
    TH2F *hdEdxPion1 = new TH2F("hdEdxPion1","Xi PID pi",1000,0,20,1000,0,200);
    fOutputList->Add(hdEdxPion1);
    TH2F *hdEdxPion2 = new TH2F("hdEdxPion2","Xi PID pi_b",1000,0,20,1000,0,200);
    fOutputList->Add(hdEdxPion2);
    
    TH2F *hdEdxProtonAfter = new TH2F("hdEdxProtonAfter","Xi PID p",1000,0,20,1000,0,200);
    fOutputList->Add(hdEdxProtonAfter);
    TH2F *hdEdxPion1After = new TH2F("hdEdxPion1After","Xi PID pi",1000,0,20,1000,0,200);
    fOutputList->Add(hdEdxPion1After);
    TH2F *hdEdxPion2After = new TH2F("hdEdxPion2After","Xi PID pi_b",1000,0,20,1000,0,200);
    fOutputList->Add(hdEdxPion2After);
    
    
    
    
    TH2F *dEdxpi = new TH2F("dEdxpi","nsigpion",1000,0,20,1000,-5,5);
    fOutputList->Add(dEdxpi);
    
    
    TH1F *fTPCNSigProton = new TH1F("fTPCNSigProton","nsigpr",100,-5,5);
    fOutputList->Add(fTPCNSigProton);
    
    TH1F *fTPCNSigPion1 = new TH1F("fTPCNSigPion1","nsigpion1",100,-5,5);
    fOutputList->Add(fTPCNSigPion1);
    
    TH1F *fTPCNSigPion2 = new TH1F("fTPCNSigPion2","nsigpion2",100,-5,5);
    fOutputList->Add(fTPCNSigPion2);
    
    
    
    for(Int_t cv=0; cv<kNCutVariations; cv++){
        
        if(cv==0){
            TString *nameXi=new TString("fXi_");
      //      TString *nameXibar=new TString("fXibar_");
            *nameXi += cv;
        //    *nameXibar += cv;
            CutVar[cv].fXi = new TH3F(nameXi->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
            fOutputList->Add(CutVar[cv].fXi);
       //     CutVar[cv].fXibar = new TH3F(nameXibar->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
        //    fOutputList->Add(CutVar[cv].fXibar);
            //
            TString *nameMCrecXi = new TString("fMCrecXi_");
        //    TString *nameMCrecXibar = new TString("fMCrecXibar_");
            *nameMCrecXi += cv;
       //     *nameMCrecXibar += cv;
            CutVar[cv].fMCrecXi = new TH3F(nameMCrecXi->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
      //      CutVar[cv].fMCrecXibar = new TH3F(nameMCrecXibar->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
            fOutputList->Add(CutVar[cv].fMCrecXi);
     //       fOutputList->Add(CutVar[cv].fMCrecXibar);
        }
        //
        TString *nameXiStar = new TString("fXiStar_");
        TString *nameXiStarLSBG = new TString("fXiStarLSBG_");
        TString *nameXiStarEMBG = new TString("fXiStarEMBG_");
        TString *nameXiStarEMLSBG = new TString("fXiStarEMLSBG_");
        *nameXiStar += cv;
        *nameXiStarLSBG += cv;
        *nameXiStarEMBG += cv;
        *nameXiStarEMLSBG += cv;
        CutVar[cv].fXiStar  = new TH3F(nameXiStar->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
        CutVar[cv].fXiStarLSBG = new TH3F(nameXiStarLSBG->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
        CutVar[cv].fXiStarEMBG  = new TH3F(nameXiStarEMBG->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
        CutVar[cv].fXiStarEMLSBG = new TH3F(nameXiStarEMLSBG->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
        
        fOutputList->Add(CutVar[cv].fXiStar);
        fOutputList->Add(CutVar[cv].fXiStarLSBG);
        fOutputList->Add(CutVar[cv].fXiStarEMBG);
        fOutputList->Add(CutVar[cv].fXiStarEMLSBG);
        
        
        TString *nameXiStarMC = new TString("fXiStarMC_");
        *nameXiStarMC += cv;
        CutVar[cv].fXiStarMC  = new TH3F(nameXiStarMC->Data(),"Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
        fOutputList->Add(CutVar[cv].fXiStarMC);
        //
        
         }
    
    
    
    
    //////////////////////
    // MC input histos
    TH3F *fMCinputXiStar = new TH3F("fMCinputXiStar","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
    TH3F *fMCinputXiStarbar = new TH3F("fMCinputXiStarbar","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
    fOutputList->Add(fMCinputXiStar);
    fOutputList->Add(fMCinputXiStarbar);
    
    TH3F *fMCinputXi = new TH3F("fMCinputXi","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
    TH3F *fMCinputXibar = new TH3F("fMCinputXibar","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
    fOutputList->Add(fMCinputXi);
    fOutputList->Add(fMCinputXibar);
    
    //
    
    TH3F *fMCinputTotalXiStar1 = new TH3F("fMCinputTotalXiStar1","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
    TH3F *fMCinputTotalXiStarbar1 = new TH3F("fMCinputTotalXiStarbar1","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
    fOutputList->Add(fMCinputTotalXiStar1);
    fOutputList->Add(fMCinputTotalXiStarbar1);
    
    TH3F *fMCinputTotalXi1 = new TH3F("fMCinputTotalXi1","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
    TH3F *fMCinputTotalXibar1 = new TH3F("fMCinputTotalXibar1","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
    fOutputList->Add(fMCinputTotalXi1);
    fOutputList->Add(fMCinputTotalXibar1);
    
    //
    
    TH3F *fMCinputTotalXiStar3 = new TH3F("fMCinputTotalXiStar3","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
    TH3F *fMCinputTotalXiStarbar3 = new TH3F("fMCinputTotalXiStarbar3","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.4,1.6);
    fOutputList->Add(fMCinputTotalXiStar3);
    fOutputList->Add(fMCinputTotalXiStarbar3);
    
    TH3F *fMCinputTotalXi3 = new TH3F("fMCinputTotalXi3","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
    TH3F *fMCinputTotalXibar3 = new TH3F("fMCinputTotalXibar3","Invariant Mass Distribution", 100,0,10, 40,-2,2, 200,1.2,1.4);
    fOutputList->Add(fMCinputTotalXi3);
    fOutputList->Add(fMCinputTotalXibar3);
    
    //
  
    
    /// V0A and V0C information
    
    TH2F *hV0AC = new TH2F("hV0AC","V0A and V0C timing",500,-20,30,800,-30,50);
    hV0AC->GetXaxis()->SetTitle("V0A-V0C(ns)");
    hV0AC->GetYaxis()->SetTitle("V0A+V0C(ns)");
    fOutputList->Add(hV0AC);
    
    
    TH2F *hV0ACkMB = new TH2F("hV0ACkMB","V0A and V0C timing kMB select",500,-20,30,800,-30,50);
    hV0ACkMB->GetXaxis()->SetTitle("V0A-V0C(ns)");
    hV0ACkMB->GetYaxis()->SetTitle("V0A+V0C(ns)");
    fOutputList->Add(hV0ACkMB);
    
    TH1F *hV0Info = new TH1F("hV0Info","V0 Fired information",5,0,5);
    fOutputList->Add(hV0Info);

    
    ///////////////////////////////////
    PostData(1, fOutputList);
    
    
}

//________________________________________________________________________
void AliXiStar::Exec(Option_t *)
{
    
    
    
    // Main loop
    // Called for each event
    
    cout<<"===========  Event # "<<fEventCounter+1<<"  ==========="<<endl;
    fEventCounter++;
    
    
         fESD = dynamic_cast<AliESDEvent*> (InputEvent());
    

        
        if (!fESD) {Printf("ERROR: fESD not available"); return;}
    
    
    // V0A and V0C time information //
    
    
    //Double_t fT0Fired;
    Double_t fV0AFired;
    Double_t fV0CFired;
    Double_t fV0ATime;
    Double_t fV0CTime;

    
    AliTriggerAnalysis trAn;
    
    
    fV0AFired = (Double_t) trAn.V0Trigger(fESD, AliTriggerAnalysis::kASide, kTRUE); // check if V0A is fired // jisong added
    fV0CFired = (Double_t) trAn.V0Trigger(fESD, AliTriggerAnalysis::kCSide, kTRUE); // check if V0C is fired // jisong added
    
    if(fV0AFired) ((TH1F*)fOutputList->FindObject("hV0Info"))->Fill(1,1);
    if(fV0CFired) ((TH1F*)fOutputList->FindObject("hV0Info"))->Fill(2,1);

    
    AliESDVZERO * esdV0 = fESD->GetVZEROData(); // jisong
    fV0ATime = esdV0->GetV0ATime(); // v0 time side A
    fV0CTime = esdV0->GetV0CTime(); // v0 time side C

   ((TH2F*)fOutputList->FindObject("hV0AC"))->Fill(fV0ATime-fV0CTime,fV0ATime+fV0CTime);
    
    // end V0 A C analysis //
    
    // centrality selection
    //
    
    Float_t lCentrality = -100;
    Float_t centralityV0M = -100;
    Float_t centralityV0A = -100;
    
    
    fCentrality = fESD->GetCentrality();
    centralityV0M = fCentrality->GetCentralityPercentile("V0M");
    centralityV0A = fCentrality->GetCentralityPercentile("V0A");
    lCentrality =  fCentrality->GetCentralityPercentile( fCentralityEstimator.Data());
    
    ((TH1F*)fOutputList->FindObject("hCentrality"))->Fill(centralityV0A);

    
    // check  : events are selected by physics selection class
    
    
         Bool_t isSelectedMB =(((AliInputEventHandler*)(AliAnalysisManager::GetAnalysisManager()->GetInputEventHandler()))->IsEventSelected() & AliVEvent::kMB);
         if(isSelectedMB) ((TH1F*)fOutputList->FindObject("hEventSelecInfo"))->Fill(1);
        
        Bool_t isSelectedkINT7 =(((AliInputEventHandler*)(AliAnalysisManager::GetAnalysisManager()->GetInputEventHandler()))->IsEventSelected() & AliVEvent::kINT7);
             if(isSelectedkINT7) ((TH1F*)fOutputList->FindObject("hEventSelecInfo"))->Fill(2);
    
        Bool_t isSelectedkAny =(((AliInputEventHandler*)(AliAnalysisManager::GetAnalysisManager()->GetInputEventHandler()))->IsEventSelected() & (AliVEvent::kAny));
        if(isSelectedkAny) ((TH1F*)fOutputList->FindObject("hEventSelecInfo"))->Fill(7);

    
        Bool_t isSelected =(((AliInputEventHandler*)(AliAnalysisManager::GetAnalysisManager()->GetInputEventHandler()))->IsEventSelected() && AliVEvent::kMB);
            if(isSelected) ((TH1F*)fOutputList->FindObject("hEventSelecInfo"))->Fill(8);
    
        
        if(!isSelectedkINT7) {cout<<"Event Rejected"<<endl; return;}
    
    

    ((TH1F*)fOutputList->FindObject("hCentralitykSelected"))->Fill(centralityV0A);
    
    
    
    
    ((TH2F*)fOutputList->FindObject("hV0ACkMB"))->Fill(fV0ATime-fV0CTime,fV0ATime+fV0CTime);
    if(fV0AFired) ((TH1F*)fOutputList->FindObject("hV0Info"))->Fill(3,1);
    if(fV0CFired) ((TH1F*)fOutputList->FindObject("hV0Info"))->Fill(4,1);

    
    ///////////////////////////////////////////////////////////
    const AliESDVertex *PrimaryVertexESD;
    
    AliAnalysisManager *man=AliAnalysisManager::GetAnalysisManager();
    AliInputEventHandler* inputHandler = (AliInputEventHandler*) (man->GetInputEventHandler());
    
      // ---- AliPIDResponse ---- //
    fPIDResponse = inputHandler->GetPIDResponse();
    
    
    
    AliStack    *mcstack        = 0x0;
    TParticle   *MCLamD1esd     = 0x0;
    TParticle   *MCLamD2esd     = 0x0;
    TParticle   *MCLamesd       = 0x0;
    TParticle   *MCXiD2esd      = 0x0;
    TParticle   *MCXiesd        = 0x0;
    TParticle   *MCXiStarD2esd  = 0x0;
    TParticle   *MCXiStaresd    = 0x0;
    
    Double_t px1,py1,pz1, px2,py2,pz2;
    Double_t p1sq,p2sq,e1,e2,angle;
    Double_t dca3d;
    Float_t dca2[2];
    Double_t xiVtx[3];//, xiStarVtx[3];
    Double_t xiP[3], xiStarP[3];
    Double_t xiStarMom;
    Double_t xiMass, xiStarMass;
    Double_t xiPt, xiStarPt;
    Double_t xiY, xiStarY;
    Double_t xiCharge;
    Double_t decayLengthXY;
    Double_t pDaughter1[3];
    Double_t pDaughter2[3];
    Double_t xDaughter1[3];
    Double_t xDaughter2[3];
    //
    Double_t bField=0;
    UInt_t status=0;
    Int_t positiveTracks=0, negativeTracks=0;
    Int_t myTracks=0;
    Int_t myxiTracks=0;
    Int_t myMCTracks=0;
    //
    Double_t primaryVtx[3]={0};
    Int_t mBin=0;
    Int_t zBin=0;
    Double_t zStep=2*10/Double_t(fZvertexBins), zStart=-10.;
  
    
    //
    Bool_t mcXiFilled=kFALSE;// So that mctracks are never used uninitialized
    
    if(fMCcase){
        
        if(AliAnalysisManager::GetAnalysisManager()->GetMCtruthEventHandler()){
            if(static_cast<AliMCEventHandler*>(AliAnalysisManager::GetAnalysisManager()->GetMCtruthEventHandler())->MCEvent())
                mcstack = static_cast<AliMCEventHandler*>(AliAnalysisManager::GetAnalysisManager()->GetMCtruthEventHandler())->MCEvent()->Stack();
        }
        
        
    }
    
    
    
 
    // ESDs
        
        
        
        ((TH1F*)fOutputList->FindObject("fMultDist1"))->Fill(fESD->GetNumberOfTracks());
        PrimaryVertexESD = fESD->GetPrimaryVertex();
        if(!PrimaryVertexESD) return;
        
       fEventNumber =
        ( ( ((ULong64_t)fESD->GetPeriodNumber() ) << 36 ) |
        ( ((ULong64_t)fESD->GetOrbitNumber () ) << 12 ) |
        ((ULong64_t)fESD->GetBunchCrossNumber() )  );
    

            
        primaryVtx[0]=PrimaryVertexESD->GetX(); primaryVtx[1]=PrimaryVertexESD->GetY(); primaryVtx[2]=PrimaryVertexESD->GetZ();
        ((TH3F*)fOutputList->FindObject("fVertexDist1"))->Fill(primaryVtx[0], primaryVtx[1], primaryVtx[2]);
        
        if(fMCcase){
            /////////////////////////////////////////////////
            // Lam mc input
            /////////////////////////////////////////////////
            for (Int_t it = 0; it < mcstack->GetNprimary(); it++) {
                TParticle *mcInputTrack = (TParticle*)mcstack->Particle(it);
                if (!mcInputTrack) {
                    Error("UserExec", "Could not receive track %d", it);
                    continue;
                }
                
                //fTreeVariableMCinputTotalSongPID = -1;
                //fTreeVariableEventNumber4 = GetMCEventNumber();
                
                if(mcInputTrack->GetPdgCode() != +kXiCode && mcInputTrack->GetPdgCode() != -kXiCode && mcInputTrack->GetPdgCode() != +kXiStarCode && mcInputTrack->GetPdgCode() != -kXiStarCode) continue;
                
                myMCTracks++;

                
                // Xi
                if(mcInputTrack->GetPdgCode() == +kXiCode) {((TH3F*)fOutputList->FindObject("fMCinputTotalXi1"))->Fill(mcInputTrack->Pt(), mcInputTrack->Y(), mcInputTrack->GetCalcMass());
                               }
                
                if(mcInputTrack->GetPdgCode() == -kXiCode) {((TH3F*)fOutputList->FindObject("fMCinputTotalXibar1"))->Fill(mcInputTrack->Pt(), mcInputTrack->Y(), mcInputTrack->GetCalcMass());
                              }
                // XiStar
                if(mcInputTrack->GetPdgCode() == +kXiStarCode) {((TH3F*)fOutputList->FindObject("fMCinputTotalXiStar1"))->Fill(mcInputTrack->Pt(), mcInputTrack->Y(), mcInputTrack->GetCalcMass());
                                  }
                
                if(mcInputTrack->GetPdgCode() == -kXiStarCode) {((TH3F*)fOutputList->FindObject("fMCinputTotalXiStarbar1"))->Fill(mcInputTrack->Pt(), mcInputTrack->Y(), mcInputTrack->GetCalcMass());
                                 }
                
            }
           
        }
        
    
        if(fabs(primaryVtx[2]) > 10.) return; // Z-Vertex Cut
        ((TH1F*)fOutputList->FindObject("fMultDist2"))->Fill(fESD->GetNumberOfTracks());
        
        if(fESD->IsPileupFromSPD()) return; // Reject Pile-up events
        
        ((TH1F*)fOutputList->FindObject("fMultDist3"))->Fill(fESD->GetNumberOfTracks());
        ((TH3F*)fOutputList->FindObject("fVertexDist3"))->Fill(primaryVtx[0], primaryVtx[1], primaryVtx[2]);
        

        
        // multiplicity
        
        if(PrimaryVertexESD->GetNContributors() >= 1) ((TH1F*)fOutputList->FindObject("fMultDist4"))->Fill(fESD->GetNumberOfTracks());
    if(PrimaryVertexESD->GetNContributors() < 1) return; // Enrico cut

        Printf("There are %d tracks in this event", fESD->GetNumberOfTracks());
        
        bField = fESD->GetMagneticField();
        
        
        // Track loop
        for (Int_t i = 0; i < fESD->GetNumberOfTracks(); i++) {
            AliESDtrack* esdtrack = fESD->GetTrack(i);
            if (!esdtrack) continue;
            
            status=esdtrack->GetStatus();
            
            if(!fTrackCut->AcceptTrack(esdtrack)) continue;
            
            Bool_t goodMomentum = esdtrack->GetPxPyPz( fTempStruct[myTracks].fP);
            if(!goodMomentum) continue;
            esdtrack->GetXYZ( fTempStruct[myTracks].fX);
            
            
            //=========checking PID =========//
            //// *** TPC *** ////
            Float_t fTPCPIDmom = esdtrack->GetTPCmomentum();
            Float_t sigTPC = esdtrack->GetTPCsignal();
            Float_t nsigpi= fabs(fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kPion));
            Float_t nsigk= fabs(fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kKaon));
            Float_t nsigpr= fabs(fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kProton));
           
            
            ((TH2F*)fOutputList->FindObject("TPCPID"))->Fill(fTPCPIDmom,sigTPC);
            if(nsigpi<3.) ((TH2F*)fOutputList->FindObject("hTPCPIDpi"))->Fill(fTPCPIDmom,sigTPC);
            if(nsigk<3.) ((TH2F*)fOutputList->FindObject("hTPCPIDk"))->Fill(fTPCPIDmom,sigTPC);
            if(nsigpr<3.) ((TH2F*)fOutputList->FindObject("hTPCPIDp"))->Fill(fTPCPIDmom,sigTPC);
            
            ((TH2F*)fOutputList->FindObject("dEdxpi"))->Fill(fTPCPIDmom,fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kPion));
            
            
            
            //=========selecting 3rd pionusing PID=========//
 /* TPC OFF */           if(nsigpi>3.) continue; // last update // 20140715 // TPC
            
            
            esdtrack->GetCovarianceXYZPxPyPz( fTempStruct[myTracks].fCov);
            //esdtrack->GetImpactParameters(dca2, cov);
            dca2[0] = sqrt( pow(fTempStruct[myTracks].fX[0] - primaryVtx[0],2) + pow(fTempStruct[myTracks].fX[1] - primaryVtx[1],2));
            dca2[1] = sqrt( pow(fTempStruct[myTracks].fX[2] - primaryVtx[2],2));
            dca3d = sqrt( pow(dca2[0],2) + pow(dca2[1],2));
            
            ((TH1F*)fOutputList->FindObject("fDCADist"))->Fill(fESD->GetNumberOfTracks(), dca3d);
           // ((TH3F*)fOutputList->FindObject("fPhiPtDist"))->Fill(esdtrack->Charge(), esdtrack->Phi(), esdtrack->Pt());
           // ((TH3F*)fOutputList->FindObject("fPtEtaDist"))->Fill(esdtrack->Charge(), esdtrack->Pt(), esdtrack->Eta());
            
            ((TH1F*)fOutputList->FindObject("fPtDist"))->Fill(esdtrack->Pt());
            ((TH1F*)fOutputList->FindObject("fPhiDist"))->Fill(esdtrack->Phi());
            ((TH1F*)fOutputList->FindObject("fEtaDist"))->Fill(esdtrack->Eta());
            
            
            
            
            
            fTempStruct[myTracks].fStatus = status;
            fTempStruct[myTracks].fID = esdtrack->GetID();
            fTempStruct[myTracks].fLabel = esdtrack->GetLabel();
            fTempStruct[myTracks].fPhi = atan2(fTempStruct[myTracks].fP[1], fTempStruct[myTracks].fP[0]);
            if(fTempStruct[myTracks].fPhi < 0) fTempStruct[myTracks].fPhi += 2*PI;
            fTempStruct[myTracks].fPt = sqrt(pow(fTempStruct[myTracks].fP[0],2) + pow(fTempStruct[myTracks].fP[1],2));
            fTempStruct[myTracks].fMom = sqrt( pow(fTempStruct[myTracks].fPt,2) + pow(fTempStruct[myTracks].fP[2],2) );
            fTempStruct[myTracks].fEta = esdtrack->Eta();
            fTempStruct[myTracks].fCharge = esdtrack->Charge();
            fTempStruct[myTracks].fDCAXY = dca2[0];
            fTempStruct[myTracks].fDCAZ = dca2[1];
            fTempStruct[myTracks].fDCA = dca3d;
            fTempStruct[myTracks].fNSigmaPi = fabs(fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kPion));
            fTempStruct[myTracks].fNSigmaK = fabs(fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kKaon));
            fTempStruct[myTracks].fNSigmaPr = fabs(fPIDResponse->NumberOfSigmasTPC(esdtrack,AliPID::kProton));
            fTempStruct[myTracks].fNclusTPC = esdtrack->GetTPCNcls();
            
            
            if(esdtrack->Charge() > 0) positiveTracks++;
            else negativeTracks++;
            
           if(fTempStruct[myTracks].fNclusTPC < 60) continue;
         //   if(dca2[1]>3) continue;
         //   if(dca2[0]>3) continue;
            
            
            myTracks++;
        }
        
        
    
    
    
    
    
    if(myTracks >= 1) {
        ((TH1F*)fOutputList->FindObject("fMultDist5"))->Fill(myTracks);
        ((TH3F*)fOutputList->FindObject("fMultDist3d"))->Fill(positiveTracks+negativeTracks, positiveTracks, negativeTracks);
    }
    
    cout<<"There are "<<myTracks<<"  myTracks"<<endl;
    
    // set Z Vertex bin
    for(Int_t i=0; i<fZvertexBins; i++){
        if( (primaryVtx[2] > zStart+i*zStep) && (primaryVtx[2] < zStart+(i+1)*zStep) ){
            zBin=i;
            break;
        }
    }
    
    // set Multiplicity bin
    for(Int_t i=0; i<fMultBins; i++){
        if( ( myTracks > fMultLimits[i]) && ( myTracks <= fMultLimits[i+1]) ) { mBin=i; break;}
    }
    

    ////////////////////////////////////
    // Add event to buffer if > 0 tracks
    if(myTracks > 0){
        fEC[zBin][mBin]->FIFOShift();
        (fEvt) = fEC[zBin][mBin]->fEvtStr;
        (fEvt)->fNTracks = myTracks;
        for(Int_t i=0; i<myTracks; i++) (fEvt)->fTracks[i] = fTempStruct[i];
    }
    
    
    
    if(fMCcase){// get Input MC information for ESD case
        
        /////////////////////////////////////////////////
        // Xi mc input
        /////////////////////////////////////////////////
        for (Int_t it = 0; it < mcstack->GetNprimary(); it++) {
            TParticle *mcInputTrackXi = (TParticle*)mcstack->Particle(it);
            if (!mcInputTrackXi) {
                Error("UserExec", "Could not receive track %d", it);
                continue;
            }
            
            //if(!mcstack->IsPhysicalPrimary(it)) continue;
            if(abs(mcInputTrackXi->GetPdgCode())!=kXiCode) continue;
            
            
            if(mcInputTrackXi->GetPdgCode() == +kXiCode) {
                
                ((TH3F*)fOutputList->FindObject("fMCinputTotalXi3"))->Fill(mcInputTrackXi->Pt(), mcInputTrackXi->Y(), mcInputTrackXi->GetCalcMass());
              
            }
            else {((TH3F*)fOutputList->FindObject("fMCinputTotalXibar3"))->Fill(mcInputTrackXi->Pt(), mcInputTrackXi->Y(), mcInputTrackXi->GetCalcMass());
               
            }
            
        }
        
        
        
        
        /////////////////////////////////////////////////
        // XiStar mc input
        /////////////////////////////////////////////////
        for (Int_t it = 0; it < mcstack->GetNprimary(); it++) {
            TParticle *mcInputTrackXiStar = (TParticle*)mcstack->Particle(it);
            if (!mcInputTrackXiStar) {
                Error("UserExec", "Could not receive track %d", it);
                continue;
            }
            
            //if(!mcstack->IsPhysicalPrimary(it)) continue;
            if(abs(mcInputTrackXiStar->GetPdgCode())!=kXiStarCode) continue;
            
            if(mcInputTrackXiStar->GetPdgCode() == +kXiStarCode) {((TH3F*)fOutputList->FindObject("fMCinputTotalXiStar3"))->Fill(mcInputTrackXiStar->Pt(), mcInputTrackXiStar->Y(), mcInputTrackXiStar->GetCalcMass());
            }
            else {((TH3F*)fOutputList->FindObject("fMCinputTotalXiStarbar3"))->Fill(mcInputTrackXiStar->Pt(), mcInputTrackXiStar->Y(), mcInputTrackXiStar->GetCalcMass());
                
            }
            
            
        }
    }
    
      ////////////////////////////////////////////////
    // Reconstruction
    
    for(Int_t i=0; i<fESD->GetNumberOfCascades(); i++){
        
        AliESDcascade *Xicandidate = fESD->GetCascade(i);
        
        
        if(TMath::Abs( Xicandidate->GetPindex()) == TMath::Abs( Xicandidate->GetNindex())) continue;
        if(TMath::Abs( Xicandidate->GetPindex()) == TMath::Abs( Xicandidate->GetBindex())) continue;
        if(TMath::Abs( Xicandidate->GetNindex()) == TMath::Abs( Xicandidate->GetBindex())) continue;
        

        
        AliESDtrack *pTrackXi	= fESD->GetTrack(TMath::Abs( Xicandidate->GetPindex()));
        AliESDtrack *nTrackXi	= fESD->GetTrack(TMath::Abs( Xicandidate->GetNindex()));
        AliESDtrack *bTrackXi	= fESD->GetTrack(TMath::Abs( Xicandidate->GetBindex()));
        
        // Standard track QA cuts
        if(!fTrackCut->AcceptTrack(pTrackXi)) continue;
        if(!fTrackCut->AcceptTrack(nTrackXi)) continue;
        if(!fTrackCut->AcceptTrack(bTrackXi)) continue;
        

        
        //////////////////////
        // DecayParameters Key (number represents array index)
        // NclustersTPC: 0=proton, 1=pion first, 2=pion second, 3=pion third
        // DCAVtx: 4=proton, 5=pion first, 6=pion second, 7=lambda, 8=pion third
        // 9 = DCA proton-pion
        // 10 = DCA Lambda-pion
        // 11 = Rxy Lambda
        // 12 = Rxy Xi
        // 13 = Cos PA Lambda
        // 14 = Cos PA Xi
        
         //myxiTracks++;
        
        fDecayParameters[2] = bTrackXi->GetTPCNcls();
        ((TH1F*)fOutputList->FindObject("fTPCNcls_pi2"))->Fill(fDecayParameters[2]);
        
        Double_t fTPCNSigProton = 10;
        Double_t fTPCNSigPion1 = 10;
        Double_t fTPCNSigPion2 = 10;
        
        
        Double_t fTPCPIDMomXi[3] = {-10,-10,-10};
        Double_t fNSigTPCXi[3] = {-10,-10,-10};
        

        
        
        if(Xicandidate->Charge() == -1){
            fDecayParameters[0] = pTrackXi->GetTPCNcls();
            fDecayParameters[1] = nTrackXi->GetTPCNcls();
            fDecayParameters[4] = fabs(pTrackXi->GetD(primaryVtx[0],primaryVtx[1],bField));// DCA Vtx proton
            fDecayParameters[5] = fabs(nTrackXi->GetD(primaryVtx[0],primaryVtx[1],bField));// DCA Vtx pion first
            
            fTPCNSigProton = fPIDResponse->NumberOfSigmasTPC(pTrackXi,AliPID::kProton);
            fTPCNSigPion1 = fPIDResponse->NumberOfSigmasTPC(nTrackXi,AliPID::kPion);
            fTPCNSigPion2 = fPIDResponse->NumberOfSigmasTPC(bTrackXi,AliPID::kPion);
            
            fTPCPIDMomXi[0] = pTrackXi->GetTPCmomentum();
            fNSigTPCXi[0] = pTrackXi->GetTPCsignal();
            
            fTPCPIDMomXi[1] = nTrackXi->GetTPCmomentum();
            fNSigTPCXi[1] = nTrackXi->GetTPCsignal();
            
            fTPCPIDMomXi[2] = bTrackXi->GetTPCmomentum();
            fNSigTPCXi[2] = bTrackXi->GetTPCsignal();
           
        }else{
            fDecayParameters[0] = nTrackXi->GetTPCNcls();
            fDecayParameters[1] = pTrackXi->GetTPCNcls();
            fDecayParameters[4] = fabs(nTrackXi->GetD(primaryVtx[0],primaryVtx[1],bField));// DCA Vtx proton
            fDecayParameters[5] = fabs(pTrackXi->GetD(primaryVtx[0],primaryVtx[1],bField));// DCA Vtx pion first
            
            fTPCNSigProton = fPIDResponse->NumberOfSigmasTPC(nTrackXi,AliPID::kProton);
            fTPCNSigPion1 = fPIDResponse->NumberOfSigmasTPC(pTrackXi,AliPID::kPion);
            fTPCNSigPion2 = fPIDResponse->NumberOfSigmasTPC(bTrackXi,AliPID::kPion);
            
            
            fTPCPIDMomXi[0] = nTrackXi->GetTPCmomentum();
            fNSigTPCXi[0] = nTrackXi->GetTPCsignal();
            
            fTPCPIDMomXi[1] = pTrackXi->GetTPCmomentum();
            fNSigTPCXi[1] = pTrackXi->GetTPCsignal();
            
            fTPCPIDMomXi[2] = bTrackXi->GetTPCmomentum();
            fNSigTPCXi[2] = bTrackXi->GetTPCsignal();
        }
        
        
        ((TH1F*)fOutputList->FindObject("fTPCNSigProton"))->Fill(fTPCNSigProton);
        ((TH1F*)fOutputList->FindObject("fTPCNSigPion1"))->Fill(fTPCNSigPion1);
        ((TH1F*)fOutputList->FindObject("fTPCNSigPion2"))->Fill(fTPCNSigPion2);
        
        ((TH2F*)fOutputList->FindObject("hdEdxProton"))->Fill(fTPCPIDMomXi[0],fNSigTPCXi[0]);
        ((TH2F*)fOutputList->FindObject("hdEdxPion1"))->Fill(fTPCPIDMomXi[1],fNSigTPCXi[1]);
        ((TH2F*)fOutputList->FindObject("hdEdxPion2"))->Fill(fTPCPIDMomXi[2],fNSigTPCXi[2]);
        
        
        if(fTPCNSigProton>-3.&&fTPCNSigProton<3.)((TH2F*)fOutputList->FindObject("hdEdxProtonAfter"))->Fill(fTPCPIDMomXi[0],fNSigTPCXi[0]);
        if(fTPCNSigPion1>-3.&& fTPCNSigPion1<3.) ((TH2F*)fOutputList->FindObject("hdEdxPion1After"))->Fill(fTPCPIDMomXi[1],fNSigTPCXi[1]);
        if(fTPCNSigPion2>-3.&&fTPCNSigPion2<3.)((TH2F*)fOutputList->FindObject("hdEdxPion2After"))->Fill(fTPCPIDMomXi[2],fNSigTPCXi[2]);
        
    
        
 /* TPC PID OFF */       if(fTPCNSigProton<-3.||fTPCNSigProton>3.) continue; // PID for proton
 /* TPC PID OFF */      if(fTPCNSigPion1<-3.||fTPCNSigPion1>3.) continue; // PID for 1st pion
 /* TPC PID OFF */      if(fTPCNSigPion2<-3.||fTPCNSigPion2>3.) continue; // PID for 2nd pion
        
        
    
        
        ((TH1F*)fOutputList->FindObject("fTPCNcls_p"))->Fill(fDecayParameters[0]);
        ((TH1F*)fOutputList->FindObject("fTPCNcls_pi1"))->Fill(fDecayParameters[1]);
        ((TH1F*)fOutputList->FindObject("fDCADist_p"))->Fill(fDecayParameters[4]);
        ((TH1F*)fOutputList->FindObject("fDCADist_pi1"))->Fill(fDecayParameters[5]);
        
        fDecayParameters[6] = fabs(bTrackXi->GetD(primaryVtx[0],primaryVtx[1],bField));// DCA Vtx pion second
        ((TH1F*)fOutputList->FindObject("fDCADist_pi2"))->Fill(fDecayParameters[6]);
        fDecayParameters[7] = fabs(Xicandidate->GetD(primaryVtx[0],primaryVtx[1],primaryVtx[2]));// DCA Vtx Lambda
        ((TH1F*)fOutputList->FindObject("fDCADist_lambda"))->Fill(fDecayParameters[7]);
        fDecayParameters[9] = fabs(Xicandidate->GetDcaV0Daughters());// DCA proton-pion
        ((TH1F*)fOutputList->FindObject("fDCADist_pi_p"))->Fill(fDecayParameters[9]);
        fDecayParameters[10] = fabs(Xicandidate->GetDcaXiDaughters());// DCA Lambda-pion
        ((TH1F*)fOutputList->FindObject("fDCADist_pi_lambda"))->Fill(fDecayParameters[10]);
        
        Double_t tempX[3]={0};
        Xicandidate->GetXYZ(tempX[0], tempX[1], tempX[2]);
        fDecayParameters[11] = sqrt( pow(tempX[0],2) + pow(tempX[1],2));// Rxy Lambda
        ((TH1F*)fOutputList->FindObject("fRXY_lambda"))->Fill(fDecayParameters[11]);
        
        fDecayParameters[13] = Xicandidate->GetV0CosineOfPointingAngle(primaryVtx[0],primaryVtx[1],primaryVtx[2]);// Cos PA Lambda
        ((TH1F*)fOutputList->FindObject("fCosPA_lambda"))->Fill(fDecayParameters[13]);
        
        fDecayParameters[14] = Xicandidate->GetCascadeCosineOfPointingAngle(primaryVtx[0],primaryVtx[1],primaryVtx[2]);// Cos PA Xi
        ((TH1F*)fOutputList->FindObject("fCosPA_Xi"))->Fill(fDecayParameters[14]);
        
        decayLengthXY = sqrt( pow(xiVtx[0]-primaryVtx[0],2) + pow(xiVtx[1]-primaryVtx[1],2) );
        fDecayParameters[12] = decayLengthXY;// Rxy Xi
        ((TH1F*)fOutputList->FindObject("fRXY_Xi"))->Fill(fDecayParameters[12]);
        
        
        xiP[0] = Xicandidate->Px();
        xiP[1] = Xicandidate->Py();
        xiP[2] = Xicandidate->Pz();
        xiVtx[0] = Xicandidate->Xv();
        xiVtx[1] = Xicandidate->Yv();
        xiVtx[2] = Xicandidate->Zv();
        xiPt = Xicandidate->Pt();
        xiY = Xicandidate->RapXi();
        xiMass = Xicandidate->M();
        xiCharge = Xicandidate->Charge();
 
        myxiTracks++;

        
        
        if(sqrt( pow(tempX[0],2) + pow(tempX[1],2) ) > fMaxDecayLength) continue;
        if(decayLengthXY > fMaxDecayLength) continue;
        
        Bool_t StandardXi=kTRUE;
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(1,1);
        
        if(fDecayParameters[0] < fCutValues[0][0]) StandardXi=kFALSE;// Nclus proton
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(2,1);
        
        if(fDecayParameters[1] < fCutValues[0][1]) StandardXi=kFALSE;// Nclus pion first
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(3,1);
        
        if(fDecayParameters[2] < fCutValues[0][2]) StandardXi=kFALSE;// Nclus pion second
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(4,1);
        
        //
        if(fDecayParameters[4] < fCutValues[0][4]) StandardXi=kFALSE;// DCAVtx proton
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(5,1);
        
        if(fDecayParameters[5] < fCutValues[0][5]) StandardXi=kFALSE;// DCAVtx pion first
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(6,1);
        
        if(fDecayParameters[6] < fCutValues[0][6]) StandardXi=kFALSE;// DCAVtx pion second
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(7,1);
        
        if(fDecayParameters[7] < fCutValues[0][7]) StandardXi=kFALSE;// DCAVtx Lambda
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(8,1);
        
        //
        if(fDecayParameters[9] > fCutValues[0][9]) StandardXi=kFALSE;// DCAV proton-pion
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(9,1);
        
        if(fDecayParameters[10] > fCutValues[0][10]) StandardXi=kFALSE;// DCAV Lambda-pion
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(10,1);
        
        //
        if(fDecayParameters[11] < fCutValues[0][11]) StandardXi=kFALSE;// Rxy Lambda
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(11,1);
        
        if(fDecayParameters[12] < fCutValues[0][12]) StandardXi=kFALSE;// Rxy Xi
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(12,1);
        
        //
        if(fDecayParameters[13] < fCutValues[0][13]) StandardXi=kFALSE;// Cos PA Lambda
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(13,1);
        
        if(fDecayParameters[14] < fCutValues[0][14]) StandardXi=kFALSE;// Cos PA Xi
        if(StandardXi)((TH1F*)fOutputList->FindObject("fCutEvents"))->Fill(14,1);
        
        if(StandardXi){
            if(xiCharge == -1) {
                CutVar[0].fXi->Fill(xiPt, xiY, xiMass);
                ((TH1F*)fOutputList->FindObject("hXiInvMass"))->Fill(xiMass);
            }
            else {
                CutVar[0].fXi->Fill(xiPt, xiY, xiMass);
                ((TH1F*)fOutputList->FindObject("hXiInvMass"))->Fill(xiMass);
            }
        }
     
        
        
        
        // MC associaton
        mcXiFilled = kFALSE;
        if(fMCcase ){
            
            MCXiD2esd = (TParticle*)mcstack->Particle(abs(bTrackXi->GetLabel()));
            
            if(abs(MCXiD2esd->GetPdgCode())==kPionCode){
                
                MCLamD1esd = (TParticle*)mcstack->Particle(abs(pTrackXi->GetLabel()));
                MCLamD2esd = (TParticle*)mcstack->Particle(abs(nTrackXi->GetLabel()));
                
                if(MCLamD1esd->GetMother(0) == MCLamD2esd->GetMother(0)){
                    if(abs(MCLamD1esd->GetPdgCode())==kProtonCode || abs(MCLamD2esd->GetPdgCode())==kProtonCode) {
                        if(abs(MCLamD1esd->GetPdgCode())==kPionCode || abs(MCLamD2esd->GetPdgCode())==kPionCode) {
                            
                            MCLamesd = (TParticle*)mcstack->Particle(abs(MCLamD1esd->GetMother(0)));
                            if(abs(MCLamesd->GetPdgCode())==kLambdaCode) {
                                
                                if(MCLamesd->GetMother(0) == MCXiD2esd->GetMother(0)){
                                    MCXiesd = (TParticle*)mcstack->Particle(abs(MCLamesd->GetMother(0)));
                                    if(abs(MCXiesd->GetPdgCode())==kXiCode) {
                                        mcXiFilled = kTRUE;

                                        if(StandardXi){
                                            if(Xicandidate->Charge() == -1){
                                                CutVar[0].fMCrecXi->Fill(xiPt, xiY, xiMass);
                                            }else{
                                                CutVar[0].fMCrecXi->Fill(xiPt, xiY, xiMass);
                                            }
                                            
                                            
                                        }
                                        
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }// MC association
        
        
        if(fabs(xiMass-fTrueMassXi) > fMassWindow) continue;
        fXiTrack->Set(xiVtx, xiP, fCovMatrix, Short_t(xiCharge));
        
        
        
        //////////////////////////////////////////////////////////
        // Reconstruct Xi(1530)
        for(Int_t EN=0; EN<fEventsToMix+1; EN++){// Event buffer loop
            
            for(Int_t l=0; l<(fEvt+EN)->fNTracks; l++){// Present(EN=0) and Past(EN from 1 to fEventsToMix) event track loop
                
                if(EN==0) {
                    if((fEvt+EN)->fTracks[l].fID == pTrackXi->GetID()) continue;
                    if((fEvt+EN)->fTracks[l].fID == nTrackXi->GetID()) continue;
                    if((fEvt+EN)->fTracks[l].fID == bTrackXi->GetID()) continue;
                }
                
                fXiTrack->Set(xiVtx, xiP, fCovMatrix, Short_t(xiCharge));
                
                if(!fESDTrack4) continue;
                fESDTrack4->Set((fEvt+EN)->fTracks[l].fX, (fEvt+EN)->fTracks[l].fP, (fEvt+EN)->fTracks[l].fCov, (fEvt+EN)->fTracks[l].fCharge);
  
                    fDecayParameters[8] = (fEvt+EN)->fTracks[l].fDCAXY;// DCA Vtx pion third
                    ((TH1F*)fOutputList->FindObject("fDCADist_3rd_pi"))->Fill(fDecayParameters[8]);
                    
                    
                
                    if((fEvt+EN)->fTracks[l].fDCAZ > 2) continue;
                    if( (((fEvt+EN)->fTracks[l].fStatus)&AliESDtrack::kITSrefit)==0) continue;// Require itsrefit
                    // no Chi^2 cut applied for ESDs.  Info not available in my track structure.
            
                
                if(fabs((fEvt+EN)->fTracks[l].fEta) > 0.8) continue;
                
                fDecayParameters[3] = (fEvt+EN)->fTracks[l].fNclusTPC;
                ((TH1F*)fOutputList->FindObject("fTPCNcls_pi3"))->Fill(fDecayParameters[3]);
                
                AliVertex *XiStarVtx = new AliVertex((fEvt+EN)->fTracks[l].fX,0,0);
                //fESDTrack4->PropagateToDCA(fXiTrack, bField);// Propagate tracks to dca, both tracks are budged
                if(!(fXiTrack->PropagateToDCA(XiStarVtx, bField, 3))) continue;// Propagate tracks to dca, version which assumes fESDTrack4 is already primary
                /////////////
                fXiTrack->GetPxPyPz(pDaughter1);
                fXiTrack->GetXYZ(xDaughter1);
                fESDTrack4->GetPxPyPz(pDaughter2);
                fESDTrack4->GetXYZ(xDaughter2);
                //////////////////////////
                
                
                
                //xiStarVtx[0] = (xDaughter1[0]+xDaughter2[0])/2.;
                //xiStarVtx[1] = (xDaughter1[1]+xDaughter2[1])/2.;
                //xiStarVtx[2] = (xDaughter1[2]+xDaughter2[2])/2.;
                //decayLength = sqrt(pow(xiStarVtx[0]-primaryVtx[0],2)+pow(xiStarVtx[1]-primaryVtx[1],2)+pow(xiStarVtx[2]-primaryVtx[2],2));
                
                px1=pDaughter1[0];
                py1=pDaughter1[1];
                pz1=pDaughter1[2];
                px2=pDaughter2[0];
                py2=pDaughter2[1];
                pz2=pDaughter2[2];
                
                p1sq=px1*px1+py1*py1+pz1*pz1;
                p2sq=px2*px2+py2*py2+pz2*pz2;
                if(p1sq <=0 || p2sq <=0) continue;
                
                e1=sqrt(p1sq+fTrueMassXi*fTrueMassXi);
                e2=sqrt(p2sq+fTrueMassPi*fTrueMassPi);
                angle=px1*px2+py1*py2+pz1*pz2;
                xiStarMass=fTrueMassXi*fTrueMassXi+fTrueMassPi*fTrueMassPi+2.*e1*e2-2.*angle;
                if(xiStarMass<0.) xiStarMass=1.e-8;
                xiStarMass=sqrt(xiStarMass);
                
                
                xiStarP[0] = px1+px2;
                xiStarP[1] = py1+py2;
                xiStarP[2] = pz1+pz2;
                xiStarMom = sqrt(pow(xiStarP[0],2)+pow(xiStarP[1],2)+pow(xiStarP[2],2));
                if(xiStarMom==0) continue; // So one of the following lines doesnt break
                xiStarPt = sqrt(xiStarP[0]*xiStarP[0] + xiStarP[1]*xiStarP[1]);
                xiStarY = .5*log( ((e1+e2) + xiStarP[2])/((e1+e2) - xiStarP[2]));
                //xiStarE = e1 + e2;
                
                
                //if( (xiStarP[0]*(xiStarVtx[0]-primaryVtx[0]) + xiStarP[1]*(xiStarVtx[1]-primaryVtx[1]) + xiStarP[2]*(xiStarVtx[2]-primaryVtx[2]))/xiStarMom/decayLength < fXiStarCosTheta) continue;
               
                
                for(int cv=0; cv<kNCutVariations; cv++){
                    
                    
                    if(fDecayParameters[0] < fCutValues[cv][0]) continue;// Nclus proton
                    if(fDecayParameters[1] < fCutValues[cv][1]) continue;// Nclus pion first
                    if(fDecayParameters[2] < fCutValues[cv][2]) continue;// Nclus pion second
                    if(fDecayParameters[3] < fCutValues[cv][3]) continue;// Nclus pion third
                    //
                    if(fDecayParameters[4] < fCutValues[cv][4]) continue;// DCAVtx proton
                    if(fDecayParameters[5] < fCutValues[cv][5]) continue;// DCAVtx pion first
                    if(fDecayParameters[6] < fCutValues[cv][6]) continue;// DCAVtx pion second
                    if(fDecayParameters[7] < fCutValues[cv][7]) continue;// DCAVtx Lambda
                    if(cv!=8) {if(fDecayParameters[8] > (0.0105 + 0.035/pow((fEvt+EN)->fTracks[l].fPt,1.01))) continue;}// DCAVtx pion third
                    //0.0182 + 0.035/pow((fEvt+EN)->fTracks[l].fPt,1.01
                    else {if(fDecayParameters[8] > fCutValues[cv][8]) continue;}// DCAVtx pion third
                    //
                    if(fDecayParameters[9] > fCutValues[cv][9]) continue;// DCAV proton-pion
                    if(fDecayParameters[10] > fCutValues[cv][10]) continue;// DCAV Lambda-pion
                    //
                    if(fDecayParameters[11] < fCutValues[cv][11]) continue;// Rxy Lambda
                    if(fDecayParameters[12] < fCutValues[cv][12]) continue;// Rxy Xi
                    //
                    if(fDecayParameters[13] < fCutValues[cv][13]) continue;// Cos PA Lambda
                    if(fDecayParameters[14] < fCutValues[cv][14]) continue;// Cos PA Xi
                    
                    
                    if(EN==0){
                        if(fXiTrack->Charge() == -1 &&  fESDTrack4->Charge() == -1) CutVar[cv].fXiStarLSBG->Fill(xiStarPt, xiStarY, xiStarMass);
                        else if(fXiTrack->Charge() == -1 &&  fESDTrack4->Charge() == +1) {
                            CutVar[cv].fXiStar->Fill(xiStarPt, xiStarY, xiStarMass);
                        }
                        else if(fXiTrack->Charge() == +1 &&  fESDTrack4->Charge() == -1) {
                            CutVar[cv].fXiStar->Fill(xiStarPt, xiStarY, xiStarMass);
                        }
                        else CutVar[cv].fXiStarLSBG->Fill(xiStarPt, xiStarY, xiStarMass);
                    }else {
                        if(fXiTrack->Charge() == -1 &&  fESDTrack4->Charge() == -1) CutVar[cv].fXiStarEMLSBG->Fill(xiStarPt, xiStarY, xiStarMass);
                        else if(fXiTrack->Charge() == -1 &&  fESDTrack4->Charge() == +1) CutVar[cv].fXiStarEMBG->Fill(xiStarPt, xiStarY, xiStarMass);
                        else if(fXiTrack->Charge() == +1 &&  fESDTrack4->Charge() == -1) CutVar[cv].fXiStarEMBG->Fill(xiStarPt, xiStarY, xiStarMass);
                        else CutVar[cv].fXiStarEMLSBG->Fill(xiStarPt, xiStarY, xiStarMass);
                    }
                    
                    
                    
                                      // MC associaton ESD
                    
                    
                    if(fMCcase && mcXiFilled && EN==0){// ESD MC's
                        MCXiStarD2esd = (TParticle*)mcstack->Particle(abs((fEvt)->fTracks[l].fLabel));
                        
                        if(abs(MCXiStarD2esd->GetPdgCode())==kPionCode){
                            if(MCXiesd->GetMother(0) == MCXiStarD2esd->GetMother(0)){
                                
                                MCXiStaresd = (TParticle*)mcstack->Particle(abs(MCXiesd->GetMother(0)));
                                if(abs(MCXiStaresd->GetPdgCode())==kXiStarCode) {
                                    
                                    if(fXiTrack->Charge() == -1 &&  fESDTrack4->Charge() == +1) CutVar[cv].fXiStarMC->Fill(xiStarPt, xiStarY, xiStarMass);
                                    if(fXiTrack->Charge() == +1 &&  fESDTrack4->Charge() == -1) CutVar[cv].fXiStarMC->Fill(xiStarPt, xiStarY, xiStarMass);
                                    
                                }
                            }
                        }
                    }
                    
                    
                }// Cut Variation loop
            }// 3rd pion loop
            
            
        }// Event mixing loop
        
        
        
        
        
        
        
    }// Xi loop
    
    
    
    // Post output data.
    PostData(1, fOutputList);
  
    
    
}
//________________________________________________________________________
void AliXiStar::Terminate(Option_t *)
{
    cout<<"Done"<<endl;
}
//________________________________________________________________________
/*
Double_t AliXiStar::LinearPropagateToDCA(AliESDtrack *v, AliESDtrack *t, Double_t b) {// Adapted from AliCascadeVertexer.cxx
    //--------------------------------------------------------------------
    // This function returns the DCA between the V0 and the track
    //--------------------------------------------------------------------
    
    Double_t alpha=t->GetAlpha(), cs1=TMath::Cos(alpha), sn1=TMath::Sin(alpha);
    Double_t r[3]; t->GetXYZ(r);
    Double_t x1=r[0], y1=r[1], z1=r[2];
    Double_t p[3]; t->GetPxPyPz(p);
    Double_t px1=p[0], py1=p[1], pz1=p[2];
    
    Double_t x2[3]={0};
    Double_t p2[3]={0};
    Double_t vx2,vy2,vz2;     // position and momentum of V0
    Double_t px2,py2,pz2;
    
    v->GetXYZ(x2);
    v->GetPxPyPz(p2);
    vx2=x2[0], vy2=x2[1], vz2=x2[2];
    px2=p2[0], py2=p2[1], pz2=p2[2];
    
    // calculation dca
    
    Double_t dd= Det(vx2-x1,vy2-y1,vz2-z1,px1,py1,pz1,px2,py2,pz2);
    Double_t ax= Det(py1,pz1,py2,pz2);
    Double_t ay=-Det(px1,pz1,px2,pz2);
    Double_t az= Det(px1,py1,px2,py2);
    
    Double_t dca=TMath::Abs(dd)/TMath::Sqrt(ax*ax + ay*ay + az*az);
    
    //points of the DCA
    Double_t t1 = Det(vx2-x1,vy2-y1,vz2-z1,px2,py2,pz2,ax,ay,az)/
    Det(px1,py1,pz1,px2,py2,pz2,ax,ay,az);
    
    x1 += px1*t1; y1 += py1*t1; //z1 += pz1*t1;
    
    
    //propagate track to the points of DCA
    
    x1=x1*cs1 + y1*sn1;
    if (!t->PropagateTo(x1,b)) {
        Error("PropagateToDCA","Propagation failed !");
        return 1.e+33;
    }
    
    return dca;
}
*/

//________________________________________________________________________
Double_t AliXiStar::Det(Double_t a00, Double_t a01, Double_t a10, Double_t a11) const {// Taken from AliCascadeVertexer
    //--------------------------------------------------------------------
    // This function calculates locally a 2x2 determinant
    //--------------------------------------------------------------------
    return a00*a11 - a01*a10;
}
//________________________________________________________________________
Double_t AliXiStar::Det(Double_t a00,Double_t a01,Double_t a02,
                        Double_t a10,Double_t a11,Double_t a12,
                        Double_t a20,Double_t a21,Double_t a22) const {// Taken from AliCascadeVertexer
    //--------------------------------------------------------------------
    // This function calculates locally a 3x3 determinant
    //--------------------------------------------------------------------
    return  a00*Det(a11,a12,a21,a22)-a01*Det(a10,a12,a20,a22)+a02*Det(a10,a11,a20,a21);
}
//________________________________________________________________________



